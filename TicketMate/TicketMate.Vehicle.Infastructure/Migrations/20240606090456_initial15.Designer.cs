// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketMate.Vehicle.Infastructure;

#nullable disable

namespace TicketMate.Vehicle.Infastructure.Migrations
{
    [DbContext(typeof(VehicleDbContext))]
    [Migration("20240606090456_initial15")]
    partial class initial15
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketMate.Vehicle.API.Models.RegisteredBus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusId"));

                    b.Property<bool>("ACorNONAC")
                        .HasColumnType("bit");

                    b.Property<string>("BusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeleteState")
                        .HasColumnType("bit");

                    b.Property<string>("InsuranceImgURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseImgURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SetsCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusId");

                    b.ToTable("RegisteredBuses");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.BusRoute", b =>
                {
                    b.Property<int>("RoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoutId"));

                    b.Property<string>("EndStand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartStand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoutId");

                    b.ToTable("BusRoutes");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.BusRouteStand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusRouteRoutId")
                        .HasColumnType("int");

                    b.Property<string>("StandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusRouteRoutId");

                    b.ToTable("BusRouteStands");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.RegisteredCarriage", b =>
                {
                    b.Property<int>("CarriageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarriageId"));

                    b.Property<int>("CarriageClass")
                        .HasColumnType("int");

                    b.Property<string>("CarriageNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeleteState")
                        .HasColumnType("bit");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("CarriageId");

                    b.ToTable("RegisteredCarriages");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.RegisteredLocomotive", b =>
                {
                    b.Property<int>("LocomotiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocomotiveId"));

                    b.Property<bool>("DeleteState")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseImgURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocomotiveCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocomotiveModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocomotiveNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocomotiveSpeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocomotiveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocomotiveId");

                    b.ToTable("RegisteredLocomotives");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBus", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<string>("ArrivalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comfortability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeleteState")
                        .HasColumnType("bit");

                    b.Property<string>("DepartureTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisteredBusBusId")
                        .HasColumnType("int");

                    b.Property<string>("RoutNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleId");

                    b.HasIndex("RegisteredBusBusId");

                    b.ToTable("ScheduledBuses");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBusDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArrivalDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ScheduledBusScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledBusScheduleId");

                    b.ToTable("ScheduledBusDates");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledCarriage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisteredCarriageCarriageId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduledTrainSchedulId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredCarriageCarriageId");

                    b.HasIndex("ScheduledTrainSchedulId");

                    b.ToTable("ScheduledCarriages");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledLocomotive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RegisteredLocomotiveLocomotiveId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduledTrainSchedulId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredLocomotiveLocomotiveId");

                    b.HasIndex("ScheduledTrainSchedulId");

                    b.ToTable("ScheduledLocomotives");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledTrain", b =>
                {
                    b.Property<int>("SchedulId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchedulId"));

                    b.Property<bool>("DeleteState")
                        .HasColumnType("bit");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FirstClassTicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SecondClassTicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StartStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainArrivalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainDepartureTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainDriverId")
                        .HasColumnType("int");

                    b.Property<string>("TrainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainRoutNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchedulId");

                    b.ToTable("ScheduledTrains");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledTrainDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArrivalDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ScheduledTrainSchedulId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledTrainSchedulId");

                    b.ToTable("ScheduledTrainDates");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelCarriageSeatStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Avalability")
                        .HasColumnType("bit");

                    b.Property<int>("RegisteredCarriageCarriageId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredCarriageCarriageId");

                    b.ToTable("SelCarriageSeatStructures");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelectedBusStand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduledBusScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("StandArrivalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledBusScheduleId");

                    b.ToTable("SelectedBusStands");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelectedSeatStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RegisteredBusBusId")
                        .HasColumnType("int");

                    b.Property<bool>("SeatAvailability")
                        .HasColumnType("bit");

                    b.Property<string>("SeatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredBusBusId");

                    b.ToTable("SelectedSeatStructures");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelectedTrainStation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ScheduledTrainSchedulId")
                        .HasColumnType("int");

                    b.Property<string>("TrainDepartureTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainStationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainarrivalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ScheduledTrainSchedulId");

                    b.ToTable("SelectedTrainStations");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.TrainRaliway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EndStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RailwayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RailwayNo")
                        .HasColumnType("int");

                    b.Property<string>("StartStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainRaliways");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.TrainRaliwayStation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("TrainRaliwayId")
                        .HasColumnType("int");

                    b.Property<string>("TrainStationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("TrainRaliwayId");

                    b.ToTable("TrainRaliwayStations");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.userDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DOB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicenseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnVehicleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequestStatus")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.BusRouteStand", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.BusRoute", "BusRoute")
                        .WithMany("BusRouteStands")
                        .HasForeignKey("BusRouteRoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusRoute");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBus", b =>
                {
                    b.HasOne("TicketMate.Vehicle.API.Models.RegisteredBus", "RegisteredBus")
                        .WithMany("ScheduledBuses")
                        .HasForeignKey("RegisteredBusBusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredBus");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBusDate", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.ScheduledBus", "ScheduledBus")
                        .WithMany("ScheduledBusDates")
                        .HasForeignKey("ScheduledBusScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledBus");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledCarriage", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.RegisteredCarriage", "RegisteredCarriage")
                        .WithMany("ScheduledCarriages")
                        .HasForeignKey("RegisteredCarriageCarriageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketMate.Vehicle.Domain.Models.ScheduledTrain", "ScheduledTrain")
                        .WithMany("ScheduledCarriages")
                        .HasForeignKey("ScheduledTrainSchedulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredCarriage");

                    b.Navigation("ScheduledTrain");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledLocomotive", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.RegisteredLocomotive", "RegisteredLocomotive")
                        .WithMany("ScheduledLocomotives")
                        .HasForeignKey("RegisteredLocomotiveLocomotiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketMate.Vehicle.Domain.Models.ScheduledTrain", "ScheduledTrain")
                        .WithMany("ScheduledLocomotives")
                        .HasForeignKey("ScheduledTrainSchedulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredLocomotive");

                    b.Navigation("ScheduledTrain");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledTrainDate", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.ScheduledTrain", "ScheduledTrain")
                        .WithMany("ScheduledTrainDates")
                        .HasForeignKey("ScheduledTrainSchedulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledTrain");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelCarriageSeatStructure", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.RegisteredCarriage", "RegisteredCarriage")
                        .WithMany("SelCarriageSeatStructures")
                        .HasForeignKey("RegisteredCarriageCarriageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredCarriage");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelectedBusStand", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.ScheduledBus", "ScheduledBus")
                        .WithMany("SelectedBusStands")
                        .HasForeignKey("ScheduledBusScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledBus");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelectedSeatStructure", b =>
                {
                    b.HasOne("TicketMate.Vehicle.API.Models.RegisteredBus", "RegisteredBus")
                        .WithMany("SelectedSeatStructures")
                        .HasForeignKey("RegisteredBusBusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredBus");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelectedTrainStation", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.ScheduledTrain", "ScheduledTrain")
                        .WithMany("SelectedTrainStations")
                        .HasForeignKey("ScheduledTrainSchedulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledTrain");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.TrainRaliwayStation", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.TrainRaliway", "TrainRaliway")
                        .WithMany("TrainRaliwayStations")
                        .HasForeignKey("TrainRaliwayId");

                    b.Navigation("TrainRaliway");
                });

            modelBuilder.Entity("TicketMate.Vehicle.API.Models.RegisteredBus", b =>
                {
                    b.Navigation("ScheduledBuses");

                    b.Navigation("SelectedSeatStructures");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.BusRoute", b =>
                {
                    b.Navigation("BusRouteStands");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.RegisteredCarriage", b =>
                {
                    b.Navigation("ScheduledCarriages");

                    b.Navigation("SelCarriageSeatStructures");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.RegisteredLocomotive", b =>
                {
                    b.Navigation("ScheduledLocomotives");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBus", b =>
                {
                    b.Navigation("ScheduledBusDates");

                    b.Navigation("SelectedBusStands");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledTrain", b =>
                {
                    b.Navigation("ScheduledCarriages");

                    b.Navigation("ScheduledLocomotives");

                    b.Navigation("ScheduledTrainDates");

                    b.Navigation("SelectedTrainStations");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.TrainRaliway", b =>
                {
                    b.Navigation("TrainRaliwayStations");
                });
#pragma warning restore 612, 618
        }
    }
}
