// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketMate.Vehicle.Infastructure;

#nullable disable

namespace TicketMate.Vehicle.Infastructure.Migrations
{
    [DbContext(typeof(VehicleDbContext))]
    partial class VehicleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketMate.Vehicle.API.Models.RegisteredBus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusId"));

                    b.Property<bool>("ACorNONAC")
                        .HasColumnType("bit");

                    b.Property<string>("BusNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SetsCount")
                        .HasColumnType("int");

                    b.HasKey("BusId");

                    b.ToTable("RegisteredBuses");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBus", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArrivalTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<string>("BusNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comfortability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartureTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduledBusDateScheduleDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScheduledBusDateScheduleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectedBusStandBusStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectedBusStandScheduleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ScheduleId");

                    b.HasIndex("ScheduledBusDateScheduleId", "ScheduledBusDateScheduleDate");

                    b.HasIndex("SelectedBusStandScheduleId", "SelectedBusStandBusStation");

                    b.ToTable("ScheduledBuses");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBusDate", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScheduleDate")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ScheduleId", "ScheduleDate");

                    b.ToTable("ScheduledBusDates");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelectedBusStand", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusStation")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ScheduleId", "BusStation");

                    b.ToTable("SelectedBusStands");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBus", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.ScheduledBusDate", "ScheduledBusDate")
                        .WithMany()
                        .HasForeignKey("ScheduledBusDateScheduleId", "ScheduledBusDateScheduleDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketMate.Vehicle.Domain.Models.SelectedBusStand", "SelectedBusStand")
                        .WithMany()
                        .HasForeignKey("SelectedBusStandScheduleId", "SelectedBusStandBusStation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledBusDate");

                    b.Navigation("SelectedBusStand");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBusDate", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.ScheduledBus", "ScheduledBus")
                        .WithMany("ScheduledBusDates")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScheduledBus");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.SelectedBusStand", b =>
                {
                    b.HasOne("TicketMate.Vehicle.Domain.Models.ScheduledBus", "ScheduledBus")
                        .WithMany("SelectedBusStands")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScheduledBus");
                });

            modelBuilder.Entity("TicketMate.Vehicle.Domain.Models.ScheduledBus", b =>
                {
                    b.Navigation("ScheduledBusDates");

                    b.Navigation("SelectedBusStands");
                });
#pragma warning restore 612, 618
        }
    }
}
